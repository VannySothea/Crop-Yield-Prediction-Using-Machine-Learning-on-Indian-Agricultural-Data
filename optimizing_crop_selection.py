# -*- coding: utf-8 -*-
"""Optimizing_Crop_Selection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Llri1rZ--q4Kl788aHzZdf81GJes7UVR
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# for interactivity
from ipywidgets import interact

from sklearn.cluster import KMeans
from sklearn.linear_model import LogisticRegression

from sklearn.model_selection import train_test_split

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, confusion_matrix

data = pd.read_csv('/content/agricultural_production_optimization.csv')

data.shape

data.columns

data.head()

data.tail()

data

data.isnull().sum()

data['label'].value_counts()

data.describe()

@interact
def summary(crops = list(data['label'].value_counts().index)):
    x=data[data['label']==crops]
    print('-------------------------------------------------')
    print('Statistics for Nitrogen')
    print('Minimum Nitrogen Reguired :', x['N'].min())
    print('Average Nitrogen Required :', x['N'].mean())
    print('Maximum Nitrogen Required :', x['N'].max())
    print('-------------------------------------------------')
    print('Statistics for Phosphorous')
    print('Minimum Phosphorous Reguired :', x['P'].min())
    print('Average Phosphorous Required :', x['P'].mean())
    print('Maximum Phosphorous Required :', x['P'].max())
    print('-------------------------------------------------')
    print('Statistics for Potassium')
    print('Minimum Potassium Reguired :', x['K'].min())
    print('Average Potassium Required :', x['K'].mean())
    print('Maximum Potassium Required :', x['K'].max())
    print('-------------------------------------------------')
    print('Statistics for Temperature')
    print('Minimum Temperature Reguired : (0:.2f)'.format(x['temperature'].min()))
    print('Average Temperature Required : (0:.2f)'.format( x['temperature'].mean()))
    print('Maximum Temperature Required : (0:.2f)'.format( x['temperature'].max()))
    print('-------------------------------------------------')
    print('Statistics for Humidity')
    print('Minimum Humidity Reguired : (0:.2f)'.format(x['humidity'].min()))
    print('Average Humidity Required : (0:.2f)'.format( x['humidity'].mean()))
    print('Maximum Humidity Required : (0:.2f)'.format( x['humidity'].max()))
    print('-------------------------------------------------')
    print('Statistics for PH')
    print('Minimum PH Reguired : (0:.2f)'.format(x['ph'].min()))
    print('Average PH Required : (0:.2f)'.format( x['ph'].mean()))
    print('Maximum PH Required : (0:.2f)'.format( x['ph'].max()))
    print('-------------------------------------------------')
    print('Statistics for Rainfall')
    print('Minimum Rainfall Reguired : (0:.2f)'.format(x['rainfall'].min()))
    print('Average Rainfall Required : (0:.2f)'.format( x['rainfall'].mean()))
    print('Maximum Rainfall Required : (0:.2f)'.format( x['rainfall'].max()))

@interact
def campare(conditions= ['N','P','K','temperature','ph','humidity','rainfall']):
    print('Average value for', conditions,'is {0:.2f}'.format(data[conditions].mean()))
    print('-------------------------------------------------')
    print('Rice : {0:.2f}'.format(data[(data['label']=='rice')][conditions].mean()))
    print('Black Grams : {0:.2f}'.format(data[(data['label']=='blackgrams')][conditions].mean()))
    print('Banana : {0:.2f}'.format(data[(data['label']=='banana')][conditions].mean()))
    print('Jute : {0:.2f}'.format(data[(data['label']=='jute')][conditions].mean()))
    print('Coconut : {0:.2f}'.format(data[(data['label']=='coconut')][conditions].mean()))
    print('Apple : {0:.2f}'.format(data[(data['label']=='apple')][conditions].mean()))
    print('Papaya : {0:.2f}'.format(data[(data['label']=='papaya')][conditions].mean()))
    print('Muskmelon : {0:.2f}'.format(data[(data['label']=='muskmelon')][conditions].mean()))
    print('Graps : {0:.2f}'.format(data[(data['label']=='graps')][conditions].mean()))
    print('Watermelon : {0:.2f}'.format(data[(data['label']=='watermelon')][conditions].mean()))
    print('Kidney Beans : {0:.2f}'.format(data[(data['label']=='kidneybeans')][conditions].mean()))
    print('Mung Beans : {0:.2f}'.format(data[(data['label']=='mungbeans')][conditions].mean()))
    print('Oranges : {0:.2f}'.format(data[(data['label']=='orange')][conditions].mean()))
    print('Chick Peas : {0:.2f}'.format(data[(data['label']=='chickpeas')][conditions].mean()))
    print('Lentils : {0:.2f}'.format(data[(data['label']=='lentils')][conditions].mean()))
    print('Cotton : {0:.2f}'.format(data[(data['label']=='cotton')][conditions].mean()))
    print('Maiz : {0:.2f}'.format(data[(data['label']=='maiz')][conditions].mean()))
    print('Moth Beans : {0:.2f}'.format(data[(data['label']=='mothbeans')][conditions].mean()))
    print('Pigeon Peas : {0:.2f}'.format(data[(data['label']=='pigeonpeas')][conditions].mean()))
    print('Mango : {0:.2f}'.format(data[(data['label']=='mango')][conditions].mean()))
    print('Pomegranate : {0:.2f}'.format(data[(data['label']=='pomegranate')][conditions].mean()))
    print('Coffee : {0:.2f}'.format(data[(data['label']=='coffee')][conditions].mean()))

@interact
def compare(conditions=['N','P','K','temperature','ph','humidity','rainfall']):
    print('Crops which require greater than average',conditions,'\n')
    print(data[data[conditions]>data[conditions].mean()]['label'].unique())
    print('-------------------------------------------------')
    print('Crops which require less than average',conditions,'\n')
    print(data[data[conditions]<=data[conditions].mean()]['label'].unique())

print('Crops which require very high Ratio of Nitrogen Content in soil :', data[data['N']>120]['label'].unique())
print('-------------------------------------------------')
print('Crops which require very high Ratio of Phosphorous Content in soil :', data[data['P']>100]['label'].unique())
print('-------------------------------------------------')
print('Crops which require very high Ratio of Potassium Content in soil :', data[data['K']>200]['label'].unique())
print('-------------------------------------------------')
print('Crops which require very high Ratio of Rainfall Content in soil :', data[data['rainfall']>200]['label'].unique())
print('-------------------------------------------------')
print('Crops which require very low Temperature :', data[data['temperature']<10]['label'].unique())
print('-------------------------------------------------')
print('Crops which require very high Temperature :', data[data['temperature']>40]['label'].unique())
print('-------------------------------------------------')
print('Crops which require very low HUmidity :', data[data['humidity']<20]['label'].unique())
print('-------------------------------------------------')
print('Crops which require very low PH :', data[data['ph']<4]['label'].unique())
print('-------------------------------------------------')
print('Crops which require very high PH :', data[data['ph']>9]['label'].unique())

print('Summer Season Crops')
print(data[(data['temperature']>30) &(data['humidity']>50)]['label'].unique())
print('-------------------------------------------------')
print('Winter Season Crops')
print(data[(data['temperature']<20) &(data['humidity']>30)]['label'].unique())
print('-------------------------------------------------')
print('Rainy Season Crops')
print(data[(data['rainfall']>200) &(data['humidity']>30)]['label'].unique())

#Removing the label column cause there is no need of label in clustering
x = data.drop(['label'],axis=1)

#Selecting all the values of the data
x = x.values

print(x.shape)

# implementing the KMeans algorithm to perform Clustering analysis

km=KMeans(n_clusters = 4, init= 'k-means++', max_iter = 300, n_init = 10, random_state =0)
y_means = km.fit_predict(x)

#lets find out the Results
a = data['label']
y_means= pd.DataFrame(y_means)
z= pd.concat([y_means, a], axis =1)
z=z.rename(columns = {0: 'cluster'})

#let check the clusters of each Crops
print('Crops in First cluster : ', z[z['cluster']==0]['label'].unique())
print('------------------------------------------------------')
print('Crops in Second cluster : ', z[z['cluster']==1]['label'].unique())
print('------------------------------------------------------')
print('Crops in Third cluster : ', z[z['cluster']==2]['label'].unique())
print('------------------------------------------------------')
print('Crops in Fourth cluster : ', z[z['cluster']==3]['label'].unique())
print('------------------------------------------------------')

y = data['label']
x = data.drop(['label'], axis = 1)

print('Shape of x: ', x.shape)
print('Shape of Y: ', y.shape)

# let create training and testing sets for validation of results

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state=0)

print('The Shape of x Train: ', x_train.shape)
print('The Shape of x Test: ', x_test.shape)
print('The Shape of y Train: ', y_train.shape)
print('The Shape of y Test: ', y_test.shape)

model = LogisticRegression()
model.fit(x_train, y_train)
y_pred= model.predict(x_test)

# lets Evalute the Model Performance
plt.rcParams["figure.figsize"]=(10,10)
cm = confusion_matrix(y_test,y_pred)
sns.heatmap(cm, annot= True, cmap='Wistia')
plt.title('Confussion Matrix for Logistic Regression', fontsize=15)
plt.show()

data.describe()

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score

# Compute additional metrics
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted') # Use 'weighted' average for multiclass
recall = recall_score(y_test, y_pred, average='weighted') # Use 'weighted' average for multiclass
f1 = f1_score(y_test, y_pred, average='weighted') # Use 'weighted' average for multiclass

print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

prediction = model.predict(np.array([[50,
                                     100,
                                     200,
                                     20,
                                     20,
                                     7,
                                     200]]))
print('The Suggested Crop for Given Climatic Condition is: ', prediction)

